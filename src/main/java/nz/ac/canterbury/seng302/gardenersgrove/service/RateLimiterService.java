package nz.ac.canterbury.seng302.gardenersgrove.service;


import org.springframework.stereotype.Service;
import java.time.Duration;
import java.time.Instant;


/**
 * This code was partially generated by chatGPT
 * RateLimiterService is based on Token Bucket Algorithm which is for rate-limiting.
 * The main reason is when users put the input on location search, each keystroke sends a request to api server.
 * This code will help to control the ratio of sending requests from users.
 */
@Service
public class RateLimiterService {
    private final int CAPACITY = 7;
    private final int REFILLRATE = 5;
    private int tokens;
    private Instant lastRefillTime;

    /**
     * Constructor of RateLimiterService
     */
    public RateLimiterService() {
        this.tokens = CAPACITY;
        this.lastRefillTime = Instant.now();
    }

    /**
     * When a user wants to send a request, it consumes one token.
     * @return If there is token(s) left in the bucket, consume the token and return true. Otherwise, false.
     */
    public synchronized boolean tryConsume() {
        refillTokens();
        if (tokens > 0) {
            tokens--;
            return true;
        }
        return false;
    }

    /**
     * Refills tokens in the token bucket based on the elapsed time since the last refill.
     */
    private void refillTokens() {
        Instant now = Instant.now();
        long elapsedSeconds = Duration.between(lastRefillTime, now).getSeconds();
        int tokensToAdd = (int) (elapsedSeconds * REFILLRATE);
        tokens = Math.min(CAPACITY, tokens + tokensToAdd);
        lastRefillTime = now;
    }

}