//This code was partially generated by ChatGPT
document.addEventListener('DOMContentLoaded', function () {
    const addressInput = document.getElementById('location');
    const suburbInput = document.getElementById('suburb');
    const cityInput = document.getElementById('city');
    const countryInput = document.getElementById('country');
    const postcodeInput = document.getElementById('postcode');
    const autocompleteResults = document.getElementById('autocomplete-results');
    const xmlRequest = new XMLHttpRequest();

    addressInput.addEventListener('input', function () {
        const inputValue = this.value.trim();
        if (inputValue.length > 0) {
            fetchAutocomplete(inputValue)
                .then(data => {
                    showAutocompleteResults(data);
                })
                .catch(err => {
                    console.error(err);
                });
        } else {
            hideAutocompleteResults();
        }
    });

    function fetchAutocomplete(query) {
        return new Promise((resolve, reject) => {
            xmlRequest.open('GET', '../sendRequest?query=' + encodeURIComponent(query));
            xmlRequest.onload = function () {
                if (xmlRequest.status === 200) {
                    const responseData = JSON.parse(xmlRequest.responseText);
                    console.log('Response from Java:', responseData);
                    resolve(responseData);
                    return responseData.json();
                } else {
                    console.error('Error:', xmlRequest.statusText);
                    reject(new Error('Network response was not ok'));
                }
            };
            xmlRequest.onerror = function () {
                reject(new Error('Request failed'));
            };
            xmlRequest.send();
        });
    }

    function showAutocompleteResults(results) {
        autocompleteResults.innerHTML = '';
        if (results.error) {
            const item = document.createElement('div');
            item.classList.add('autocomplete-item');
            item.textContent = "No matching location found, location-based services may not work"
            item.style.color = 'red';
            autocompleteResults.appendChild(item);
        } else {
            results.forEach(result => {
                const item = document.createElement('div');
                item.classList.add('autocomplete-item');
                item.textContent = result.display_name;
                item.addEventListener('click', function () {
                    fillAddressDetails(result);
                    hideAutocompleteResults();
                });
                autocompleteResults.appendChild(item);
            });
        }
        autocompleteResults.classList.add('visible');
    }

    function hideAutocompleteResults() {
        autocompleteResults.innerHTML = '';
        autocompleteResults.classList.remove('visible');
    }

    function fillAddressDetails(address) {
        selectedLocation = address;
        const addressInputValue = `${address.address.house_number || ''} ${address.address.road || ''}`;
        addressInput.value = addressInputValue.trim();
        suburbInput.value = address.address.suburb || '';
        cityInput.value = address.address.city || '';
        countryInput.value = address.address.country || '';
        postcodeInput.value = address.address.postcode || '';
    }

    document.addEventListener('click', function (event) {
        const target = event.target;
        if (!target.closest('.autocomplete-container')) {
            hideAutocompleteResults();
        }
    });
});