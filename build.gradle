import org.gradle.api.tasks.testing.logging.TestExceptionFormat

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.2'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'jacoco'
	id 'org.sonarqube' version '4.0.0.2929'
}

group = 'team-700'
version = '0.0.1-SNAPSHOT'

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'com.h2database:h2'

	implementation "org.springframework.boot:spring-boot-starter-security"

	implementation "org.springframework.boot:spring-boot-starter-cache"

	// Dependency for maria DB - persistent db
	implementation "org.mariadb.jdbc:mariadb-java-client:3.3.3"

	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	// https://mvnrepository.com/artifact/org.springframework.security/spring-security-test
	testImplementation 'org.springframework.security:spring-security-test:6.2.3'
	implementation 'org.simplejavamail:simple-java-mail:8.8.0'

	//Cucumber dependencies
	testImplementation 'io.cucumber:cucumber-java:7.15.0'
	testImplementation 'io.cucumber:cucumber-spring:7.15.0'
	testImplementation 'io.cucumber:cucumber-junit-platform-engine:7.15.0'
	testImplementation 'org.junit.platform:junit-platform-suite:1.10.2'

	//Bootstrap dependencies
//	runtimeOnly("org.webjars:bootstrap:5.3.3")
	implementation 'org.webjars:bootstrap:5.3.3'
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}

tasks.register("cucumber", Test) {
	testLogging.showStandardStreams = true
	systemProperty "spring.config.additional-location", "classpath:/application-cucumber.properties"
	useJUnitPlatform()
	filter {
		includeTestsMatching "nz.ac.canterbury.seng302.gardenersgrove.cucumber.*"
	}
	testLogging {
		events "passed", "skipped", "failed", "standardOut", "standardError"
		exceptionFormat TestExceptionFormat.FULL
	}
}

// Selects what reports Jacoco generates and where to put them
jacocoTestReport {
	reports {
		xml.required.set(true)
		xml.destination file("${layout.buildDirectory}/jacoco/test-report.xml")
		csv.required.set(false)
		html.destination file("${layout.buildDirectory}/jacoco/html")
	}
}
sonarqube {
	properties {
		property "sonar.projectKey", "team-700"
		property "sonar.projectName", "team-700"
		property "sonar.sourceEncoding", "UTF-8"
		property "sonar.host.url", "https://sonarqube.csse.canterbury.ac.nz"
		property "sonar.login", "$System.env.SONARQUBE_TOKEN"
	}
}
